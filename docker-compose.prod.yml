# =============================================================================
# AI Trading Platform - Production Docker Compose Override
# Production-specific configurations for enhanced security and performance
# =============================================================================

version: '3.8'

services:
  # Main Trading Application - Production Configuration
  trading-app:
    environment:
      - NODE_ENV=production
      - TRADING_ENABLED=${TRADING_ENABLED:-false}
      - API_RATE_LIMIT_ENABLED=true
      - API_RATE_LIMIT_REQUESTS_PER_MINUTE=50
      - CORS_ENABLED=false
      - DEBUG=false
      - LOG_LEVEL=warn
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL - Production Configuration
  postgres:
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis - Production Configuration
  redis:
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.125'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx - Production Configuration with SSL
  nginx:
    profiles: []  # Enable in production by default
    environment:
      - TZ=Asia/Bangkok
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: ai-trading-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - TZ=Asia/Bangkok
    volumes:
      - trading_backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    networks:
      - trading-network
    depends_on:
      - postgres
    entrypoint: /bin/sh
    command: /backup.sh
    profiles:
      - backup

# Production-specific network configuration
networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: trading-br
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"

# Production-specific volume configurations with backup
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
      backup: true

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis
      backup: true

  trading_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/backups
      backup: true