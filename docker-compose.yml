# =============================================================================
# AI Trading Platform - Docker Compose Configuration
# Phase 2.4 Multi-Exchange Expansion Support
# =============================================================================

version: '3.8'

services:
  # Main AI Trading Application
  trading-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-1.0.0}
        GIT_COMMIT: ${GIT_COMMIT:-$(git rev-parse HEAD)}
    container_name: ai-trading-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - TZ=Asia/Bangkok
      - DASHBOARD_PORT=3000
      - HEALTH_CHECK_PORT=3001
      - TRADING_ENABLED=${TRADING_ENABLED:-false}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - BITKUB_API_KEY=${BITKUB_API_KEY}
      - BITKUB_API_SECRET=${BITKUB_API_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.0-flash-exp}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - CUSTOM_AI_API_KEY=${CUSTOM_AI_API_KEY}
      - CUSTOM_AI_BASE_URL=${CUSTOM_AI_BASE_URL}
      - RISK_PER_TRADE_PERCENTAGE=${RISK_PER_TRADE_PERCENTAGE:-5}
      - MAX_DAILY_LOSS_PERCENTAGE=${MAX_DAILY_LOSS_PERCENTAGE:-10}
      - MAX_CONCURRENT_POSITIONS=${MAX_CONCURRENT_POSITIONS:-3}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - ALERT_EMAIL_SMTP_HOST=${ALERT_EMAIL_SMTP_HOST}
      - ALERT_EMAIL_SMTP_PORT=${ALERT_EMAIL_SMTP_PORT:-587}
      - ALERT_EMAIL_USER=${ALERT_EMAIL_USER}
      - ALERT_EMAIL_PASS=${ALERT_EMAIL_PASS}
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO}
    ports:
      - "${DASHBOARD_PORT:-3000}:3000"
      - "${HEALTH_CHECK_PORT:-3001}:3001"
    volumes:
      - trading_data:/app/data
      - trading_logs:/app/logs
      - trading_config:/app/config
      - trading_backups:/app/backups
    networks:
      - trading-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: ai-trading-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trading_platform}
      - POSTGRES_USER=${POSTGRES_USER:-trading_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - TZ=Asia/Bangkok
      - PGTZ=Asia/Bangkok
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trading_user} -d ${POSTGRES_DB:-trading_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.125'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-trading-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - TZ=Asia/Bangkok
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-trading-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    environment:
      - TZ=Asia/Bangkok
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - prometheus_logs:/var/log/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - trading-network
    depends_on:
      - trading-app
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-trading-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - TZ=Asia/Bangkok
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_logs:/var/log/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - trading-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai-trading-nginx
    restart: unless-stopped
    environment:
      - TZ=Asia/Bangkok
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - trading-network
    depends_on:
      - trading-app
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Network Configuration
networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Volume Configuration
volumes:
  # Application Data
  trading_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
  trading_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs
  trading_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/config
  trading_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/backups

  # Database Volumes
  postgres_data:
    driver: local
  postgres_logs:
    driver: local

  # Redis Volumes
  redis_data:
    driver: local
  redis_logs:
    driver: local

  # Monitoring Volumes
  prometheus_data:
    driver: local
  prometheus_logs:
    driver: local
  grafana_data:
    driver: local
  grafana_logs:
    driver: local

  # Nginx Volumes
  nginx_logs:
    driver: local